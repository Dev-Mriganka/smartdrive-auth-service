version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartdrive-postgres
    environment:
      POSTGRES_DB: smartdrive_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smartdrive-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    build: .
    container_name: smartdrive-auth-service
    ports:
      - "8085:8085"
    environment:
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: smartdrive_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # OAuth2 Configuration
      OAUTH2_ISSUER: http://localhost:8085
      JWT_SECRET: your-256-bit-secret-key-here-make-it-long-and-secure-for-production
      JWT_EXPIRATION: 3600000
      JWT_REFRESH_EXPIRATION: 604800000
      
      # Social Login (Replace with real values)
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
      GITHUB_CLIENT_ID: your-github-client-id
      GITHUB_CLIENT_SECRET: your-github-client-secret
      MICROSOFT_CLIENT_ID: your-microsoft-client-id
      MICROSOFT_CLIENT_SECRET: your-microsoft-client-secret
      
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080,http://localhost:4200
      
      # Logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_SMARTDRIVE: DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
