server:
  port: 8085

spring:
  application:
    name: auth-service
  
  profiles:
    active: local
  
  datasource:
    url: jdbc:h2:mem:authdb
    username: sa
    password: password
    driver-class-name: org.h2.Driver
  
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
  
  h2:
    console:
      enabled: true
  
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    database: ${REDIS_DATABASE:0}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            redirect-uri: "{baseUrl}/oauth2/social/google/callback"
            scope: openid, profile, email

---
# Docker profile (original configuration)
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:postgres-auth}:${POSTGRES_PORT:5432}/${POSTGRES_DB:smartdrive_auth}
    username: ${POSTGRES_USER:smartdrive}
    password: ${POSTGRES_PASSWORD:password}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  redis:
    host: ${REDIS_HOST:}
    port: ${REDIS_PORT:6379}
    database: ${REDIS_DATABASE:0}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
  
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            redirect-uri: "{baseUrl}/oauth2/social/google/callback"
            scope: openid, profile, email

# Auth Service Configuration
auth:
  service:
    internal:
      key: ${AUTH_SERVICE_INTERNAL_KEY:internal-auth-key}

# User Service Configuration
user:
  service:
    url: ${USER_SERVICE_URL:http://user-service:8086}

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:your-256-bit-secret-key-here-make-it-long-and-secure}
  expiration: ${JWT_EXPIRATION:86400000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}
  issuer: ${JWT_ISSUER:smartdrive-auth-service}

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}

# Logging
logging:
  level:
    com.smartdrive.authservice: DEBUG
    org.springframework.security: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: http://eureka-server:8761/eureka/
    register-with-eureka: false
    fetch-registry: false
    enabled: false
  instance:
    prefer-ip-address: true
    hostname: auth-service
